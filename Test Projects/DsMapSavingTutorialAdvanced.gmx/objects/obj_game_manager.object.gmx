<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Save Data
save_data = ds_map_create();
save_file="SaveData.sav";
save_data_set_value("Current Room",room_get_name(room));
var _val=5;
var _inf = _val/0;
var _square = _inf*_inf;
var _sqrt = sqrt(_square);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transition Stuff
enum Trans_Dir{left,right,up,down};
enum Trans_State{none,out,in}
state=Trans_State.none;
trans_dir = Trans_Dir.up; //Doesn't matter.

timer=0;
transition_length=room_speed/4;
target_room=noone;
transition_x=0;
transition_y=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change rooms
switch(state)
{
  case Trans_State.none:
  {
    //Keyboard
    var _left=keyboard_check_pressed(vk_left); 
    var _right=keyboard_check_pressed(vk_right);
    var _up=keyboard_check_pressed(vk_up);
    var _down=keyboard_check_pressed(vk_down);
    
    //Mouse
    /*if(device_mouse_check_button_pressed(0,mb_left))
    {
      var _margin=50;
      if(device_mouse_x(0)&lt;_margin)
        _left=true;
      else if(device_mouse_x(0)&gt;room_width-_margin)
        _right=true;
      else if(device_mouse_y(0)&lt;_margin)
        _up=true;
      else if(device_mouse_y(0)&gt;room_height-_margin)
        _down=true;
    }*/
    
    if(_left || _right || _up || _down)
     state = Trans_State.out;
    
    switch(room)
    {
      case rm_middle:
        if(_left){ target_room=rm_left; trans_dir=Trans_Dir.left; break;}
        if(_right){ target_room=rm_right; trans_dir=Trans_Dir.right; break;}
        if(_up){ target_room=rm_up; trans_dir=Trans_Dir.up; break;}
        if(_down){ target_room=rm_down; trans_dir=Trans_Dir.down; break;}
        break;
      case rm_up:
        if(_down){ target_room=rm_middle; trans_dir=Trans_Dir.down;}
        else{state = Trans_State.none;}
        break;
      case rm_left:
        if(_right){ target_room=rm_middle; trans_dir=Trans_Dir.right;}
        else{state = Trans_State.none;}
        break;
      case rm_right:
        if(_left){ target_room=rm_middle; trans_dir=Trans_Dir.left;}
        else{state = Trans_State.none;}
        break;
      case rm_down:
        if(_up){ target_room=rm_middle; trans_dir=Trans_Dir.up;}
        else{state = Trans_State.none;}
        break;
    }
  }break;
  
  default:
  { ///Handle in and out transitions
    draw_set_color(c_black);
    transition_x=0; 
    transition_y=0;
    var _bias=.5;
    if(state == Trans_State.out)
    {
      _bias=.8; 
      timer++;
      
      switch(trans_dir)
      {
        case Trans_Dir.up:    transition_y=interpolate(-room_height,0,timer/transition_length,_bias); break;
        case Trans_Dir.down:  transition_y=interpolate(room_height,0,timer/transition_length,_bias);  break;
        case Trans_Dir.left:  transition_x=interpolate(-room_width,0,timer/transition_length,_bias);  break;
        case Trans_Dir.right: transition_x=interpolate(room_width,0,timer/transition_length,_bias);   break;
      }
      //We done yet?
      if(timer &gt;= transition_length)
      {
        timer=transition_length;
        room_goto(target_room);
        state = Trans_State.in;
      }
    }
    else if(state == Trans_State.in)
    {
      _bias=.2;
      timer--;
      
      switch(trans_dir)
      {
        case Trans_Dir.down:    transition_y=interpolate(-room_height,0,timer/transition_length,_bias); break;
        case Trans_Dir.up:  transition_y=interpolate(room_height,0,timer/transition_length,_bias);  break;
        case Trans_Dir.right:  transition_x=interpolate(-room_width,0,timer/transition_length,_bias);  break;
        case Trans_Dir.left: transition_x=interpolate(room_width,0,timer/transition_length,_bias);   break;
      }
      //We done yet?
      if(timer &lt;= 0)
      {
        timer=0;
        state = Trans_State.none;
      }
    }
    
    
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save all the coins and their current state.
enum Coins
{
  x,
  y,
  image_speed,
  image_index,
  start_image_speed,
  direction,
  speed,
  bounce,
  bounce_height,
  timer,
  column_count
}

var _coins = ds_grid_create(Coins.column_count,0);
with(obj_coin)
{
  var _row = ds_grid_add_row(_coins);
  _coins[# Coins.x, _row]=x;
  _coins[# Coins.y, _row]=y;
  _coins[# Coins.image_speed, _row]=image_speed;
  _coins[# Coins.image_index, _row]=image_index;
  _coins[# Coins.start_image_speed, _row]=start_image_speed;
  _coins[# Coins.direction, _row]=direction;
  _coins[# Coins.speed, _row]=speed;
  _coins[# Coins.bounce, _row]=bounce;
  _coins[# Coins.bounce_height, _row]=bounce_height;
  _coins[# Coins.timer, _row]=timer;
}

var _key = room_get_name(room)+"coins";
save_data_set_value(_key,ds_grid_write(_coins));

ds_grid_destroy(_coins);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Room
save_data_set_value("Current Room",room_get_name(room));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload leftover coins
var _key = room_get_name(room)+"coins";
var _coins = ds_grid_create(0,0);

var _str = save_data_get_value(_key);
if(_str == undefined)
  exit;

ds_grid_read(_coins,_str);

for (var _row=0; _row&lt;ds_grid_height(_coins); _row++)
{
  with(instance_create(0,0,obj_coin))
  {
    
    x=_coins[# Coins.x, _row];
    y=_coins[# Coins.y, _row];
    image_speed=_coins[# Coins.image_speed, _row];
    image_index=_coins[# Coins.image_index, _row];
    start_image_speed=_coins[# Coins.start_image_speed, _row];
    direction=_coins[# Coins.direction, _row];
    speed=_coins[# Coins.speed, _row];
    bounce=_coins[# Coins.bounce, _row];
    bounce_height=_coins[# Coins.bounce_height, _row];
    timer=_coins[# Coins.timer, _row];
  }
}

ds_grid_destroy(_coins);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == Trans_State.out || state == Trans_State.in)
  draw_rectangle(transition_x,transition_y,transition_x+room_width,transition_y+room_height,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
