<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9997</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declaring Variables
//write your messages in an array, starting at 0, like so
message[0] = "*So why did you want this book?";
message[1] = "*People just pass this book off# as a myth or a fairy tale,";
message[2] = "*but the further back in time something# happens, the less likely people are# to believe it.";
message[3] = "*...You don't really believe that# mages are real...right?";
message[4] = "*The reason I wanted this specific# book is that it was the first to# tell this story,";
message[5] = "*which has been passed down# by my ancestors over generations-";
message[6] = "*A piece of torn paper falls out# from the back of the book*";
message[7] = "*What's this?";
message[8] = "*It looks like part of a map showing# the old church in this town.";
message[9] = "*Could this be connected to the story# in the book somehow?";
message[10] = "*That seems like a huge assumption.";
message[11] = "*We should go there and investigate.";

message_current = 0; //0 is the first number in our array, and the message we are currently at
message_end = 11; //9 is the last number in our array
message_draw = ""; //this is what we 'write' out. It's blank right now
increase = 0.25; //the speed at which new characters are added
characters = 0; //how many characters have already been drawn
hold = 0; //if we hold 'Z', the text will render faster
message_finished = 0;

message_length = string_length(message[message_current]); //get the number of characters in the first message
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_text_scrolling();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_dialogue_box();

switch (message_current)
{
    case 0:
    {
        scr_character_emotions(spr_rupert_dialogue_normal);
        break;
    }
    
    case 1:
    {
        scr_character_emotions(spr_player_dialogue_normal);
        break;
    }
    
    case 2:
    {
        scr_character_emotions(spr_player_dialogue_normal);
        break;
    }
    
    case 3:
    {
        scr_character_emotions(spr_rupert_dialogue_normal);
        break;
    }
    
    case 4:
    {
        scr_character_emotions(spr_player_dialogue_normal);
        break;
    }
    
    case 5:
    {
        scr_character_emotions(spr_player_dialogue_normal)
        break;
    }
    
    case 6:
    {
        break;
    }
    
    case 7:
    {
        scr_character_emotions(spr_rupert_dialogue_normal);
        break;
    }
    
    case 8:
    {
        scr_character_emotions(spr_player_dialogue_normal)
        break;
    }
    
    case 9:
    {
        scr_character_emotions(spr_player_dialogue_normal)
        break;
    }
    
    case 10:
    {
        scr_character_emotions(spr_rupert_dialogue_normal);
        break;
    }
    
    case 11:
    {
        scr_character_emotions(spr_player_dialogue_normal)
        break;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
